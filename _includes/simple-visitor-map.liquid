<!-- Simple but Effective Visitor Map -->
<div id="simple-visitor-map" style="
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 320px;
  max-height: 400px;
  background: rgba(255, 255, 255, 0.97);
  border: 1px solid #ddd;
  border-radius: 12px;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  z-index: 1000;
  overflow: hidden;
  transition: all 0.3s ease;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
">
  <!-- Header -->
  <div style="
    padding: 12px 16px;
    background: linear-gradient(135deg, #2196F3 0%, #21CBF3 100%);
    color: white;
    font-size: 14px;
    font-weight: 600;
    display: flex;
    justify-content: space-between;
    align-items: center;
  ">
    <span>üåç Visitor Locations</span>
    <div style="display: flex; align-items: center; gap: 8px;">
      <span id="live-count" style="
        background: rgba(255,255,255,0.2);
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 12px;
      ">0</span>
      <button id="toggle-simple-map" style="
        background: rgba(255,255,255,0.2);
        border: none;
        color: white;
        cursor: pointer;
        font-size: 16px;
        padding: 4px 8px;
        border-radius: 4px;
        transition: all 0.2s;
      ">‚àí</button>
    </div>
  </div>
  
  <!-- Content -->
  <div id="simple-map-content">
    <!-- World Map SVG -->
    <div id="world-svg-container" style="
      height: 180px;
      background: linear-gradient(135deg, #e3f2fd 0%, #f1f8e9 100%);
      position: relative;
      overflow: hidden;
    ">
      <svg id="world-map-svg" width="100%" height="100%" viewBox="0 0 800 400" style="position: absolute; top: 0; left: 0;">
        <!-- Simplified world map paths -->
        <defs>
          <style>
            .country { fill: #90CAF9; stroke: #42A5F5; stroke-width: 0.5; }
            .visitor-dot { fill: #FF5722; stroke: white; stroke-width: 2; }
            .visitor-dot.new { animation: ping 2s infinite; }
            @keyframes ping {
              0% { transform: scale(1); opacity: 1; }
              50% { transform: scale(1.5); opacity: 0.7; }
              100% { transform: scale(1); opacity: 1; }
            }
          </style>
        </defs>
        
        <!-- Continents (simplified) -->
        <path class="country" d="M150,120 L350,120 L350,200 L150,200 Z" title="North America"/>
        <path class="country" d="M200,220 L300,220 L300,300 L200,300 Z" title="South America"/>
        <path class="country" d="M400,100 L600,100 L600,250 L400,250 Z" title="Europe/Asia"/>
        <path class="country" d="M450,260 L550,260 L550,320 L450,320 Z" title="Africa"/>
        <path class="country" d="M620,280 L720,280 L720,350 L620,350 Z" title="Australia"/>
        
        <!-- Visitor dots will be added here dynamically -->
      </svg>
    </div>
    
    <!-- Visitor List -->
    <div style="
      max-height: 150px;
      overflow-y: auto;
      border-top: 1px solid #e0e0e0;
    ">
      <div style="
        padding: 8px 16px;
        background: #f5f5f5;
        font-size: 12px;
        font-weight: 600;
        color: #666;
        border-bottom: 1px solid #e0e0e0;
      ">
        Recent Visitors
      </div>
      <div id="visitor-list-container" style="padding: 8px;">
        <!-- Visitor entries will be added here -->
      </div>
    </div>
    
    <!-- Stats Footer -->
    <div style="
      padding: 8px 16px;
      background: #f8f9fa;
      border-top: 1px solid #e0e0e0;
      font-size: 11px;
      color: #666;
      display: flex;
      justify-content: space-between;
    ">
      <span>üéØ Total: <strong id="total-visitors">0</strong></span>
      <span>üåè Countries: <strong id="unique-countries">0</strong></span>
      <span>‚è∞ Online: <strong id="online-now">1</strong></span>
    </div>
  </div>
</div>

<style>
#simple-visitor-map.minimized {
  height: 50px;
}

#simple-visitor-map.minimized #simple-map-content {
  display: none;
}

#toggle-simple-map:hover {
  background: rgba(255,255,255,0.3) !important;
}

.visitor-entry {
  display: flex;
  align-items: center;
  padding: 6px 8px;
  margin: 2px 0;
  background: white;
  border-radius: 6px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  font-size: 11px;
  transition: all 0.2s;
}

.visitor-entry:hover {
  transform: translateX(2px);
  box-shadow: 0 2px 6px rgba(0,0,0,0.15);
}

.visitor-entry.new {
  animation: slideIn 0.5s ease-out;
}

@keyframes slideIn {
  from { transform: translateX(-20px); opacity: 0; }
  to { transform: translateX(0); opacity: 1; }
}

.country-flag {
  font-size: 14px;
  margin-right: 8px;
}

.visitor-details {
  flex: 1;
  line-height: 1.3;
}

.visitor-time {
  color: #888;
  font-size: 10px;
}

/* Mobile styles */
@media (max-width: 768px) {
  #simple-visitor-map {
    width: 280px;
    bottom: 10px;
    right: 10px;
  }
}

@media (max-width: 480px) {
  #simple-visitor-map {
    width: calc(100vw - 20px);
    right: 10px;
    left: 10px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let visitorData = JSON.parse(localStorage.getItem('simpleVisitorData') || '[]');
  let onlineUsers = 1; // Assume current user is online
  
  // Country coordinates for map positioning (approximate)
  const countryCoords = {
    'US': {x: 250, y: 160}, 'CN': {x: 550, y: 140}, 'GB': {x: 420, y: 120},
    'DE': {x: 450, y: 130}, 'FR': {x: 430, y: 140}, 'JP': {x: 580, y: 150},
    'KR': {x: 570, y: 140}, 'CA': {x: 220, y: 140}, 'AU': {x: 670, y: 310},
    'RU': {x: 520, y: 110}, 'BR': {x: 250, y: 260}, 'IN': {x: 520, y: 170},
    'IT': {x: 450, y: 150}, 'ES': {x: 420, y: 150}, 'NL': {x: 440, y: 125}
  };
  
  // Country flag emojis
  const countryFlags = {
    'US': 'üá∫üá∏', 'CN': 'üá®üá≥', 'GB': 'üá¨üáß', 'DE': 'üá©üá™', 'FR': 'üá´üá∑',
    'JP': 'üáØüáµ', 'KR': 'üá∞üá∑', 'CA': 'üá®üá¶', 'AU': 'üá¶üá∫', 'IN': 'üáÆüá≥',
    'RU': 'üá∑üá∫', 'BR': 'üáßüá∑', 'IT': 'üáÆüáπ', 'ES': 'üá™üá∏', 'NL': 'üá≥üá±',
    'SE': 'üá∏üá™', 'NO': 'üá≥üá¥', 'CH': 'üá®üá≠', 'AT': 'üá¶üáπ', 'BE': 'üáßüá™',
    'DK': 'üá©üá∞', 'FI': 'üá´üáÆ', 'SG': 'üá∏üá¨', 'HK': 'üá≠üá∞', 'TW': 'üáπüáº'
  };
  
  // Add visitor dot to SVG map
  function addVisitorDot(countryCode, isNew = false) {
    const coords = countryCoords[countryCode];
    if (!coords) return;
    
    const svg = document.getElementById('world-map-svg');
    const dot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
    
    dot.setAttribute('cx', coords.x + (Math.random() - 0.5) * 30);
    dot.setAttribute('cy', coords.y + (Math.random() - 0.5) * 20);
    dot.setAttribute('r', '3');
    dot.setAttribute('class', `visitor-dot ${isNew ? 'new' : ''}`);
    dot.setAttribute('title', countryCode);
    
    svg.appendChild(dot);
    
    // Remove 'new' class after animation
    if (isNew) {
      setTimeout(() => dot.classList.remove('new'), 2000);
    }
  }
  
  // Add visitor to list
  function addVisitorToList(visitor, isNew = false) {
    const container = document.getElementById('visitor-list-container');
    const entry = document.createElement('div');
    entry.className = `visitor-entry ${isNew ? 'new' : ''}`;
    
    const flag = countryFlags[visitor.countryCode] || 'üåç';
    const time = new Date(visitor.timestamp).toLocaleTimeString([], {
      hour: '2-digit', 
      minute: '2-digit'
    });
    
    entry.innerHTML = `
      <span class="country-flag">${flag}</span>
      <div class="visitor-details">
        <div>${visitor.city || 'Unknown'}, ${visitor.country || 'Unknown'}</div>
        <div class="visitor-time">${time}</div>
      </div>
    `;
    
    // Add to top of list
    container.insertBefore(entry, container.firstChild);
    
    // Keep only last 8 entries visible
    while (container.children.length > 8) {
      container.removeChild(container.lastChild);
    }
  }
  
  // Load existing visitors
  function loadExistingVisitors() {
    visitorData.slice(0, 8).forEach(visitor => {
      addVisitorToList(visitor);
      if (visitor.countryCode) {
        addVisitorDot(visitor.countryCode);
      }
    });
  }
  
  // Track new visitor
  function trackNewVisitor() {
    fetch('https://ipapi.co/json/')
      .then(response => response.json())
      .then(data => {
        const visitor = {
          city: data.city,
          country: data.country_name,
          countryCode: data.country_code,
          timestamp: new Date().toISOString()
        };
        
        // Check if this is a unique visit (different from last hour)
        const isUniqueVisit = !visitorData.some(v => 
          v.countryCode === visitor.countryCode && 
          v.city === visitor.city &&
          (Date.now() - new Date(v.timestamp).getTime()) < 3600000
        );
        
        if (isUniqueVisit) {
          visitorData.unshift(visitor);
          visitorData = visitorData.slice(0, 50);
          localStorage.setItem('simpleVisitorData', JSON.stringify(visitorData));
          
          addVisitorToList(visitor, true);
          addVisitorDot(visitor.countryCode, true);
        }
        
        updateStats();
      })
      .catch(error => {
        console.log('Location tracking failed:', error);
        // Add demo visitor for testing
        addDemoVisitor();
      });
  }
  
  // Add demo visitor for testing
  function addDemoVisitor() {
    const demoVisitors = [
      { city: 'New York', country: 'United States', countryCode: 'US' },
      { city: 'London', country: 'United Kingdom', countryCode: 'GB' },
      { city: 'Tokyo', country: 'Japan', countryCode: 'JP' },
      { city: 'Berlin', country: 'Germany', countryCode: 'DE' }
    ];
    
    const demo = demoVisitors[Math.floor(Math.random() * demoVisitors.length)];
    demo.timestamp = new Date().toISOString();
    
    visitorData.unshift(demo);
    localStorage.setItem('simpleVisitorData', JSON.stringify(visitorData));
    
    addVisitorToList(demo, true);
    addVisitorDot(demo.countryCode, true);
    updateStats();
  }
  
  // Update statistics
  function updateStats() {
    const total = visitorData.length;
    const uniqueCountries = new Set(visitorData.map(v => v.countryCode)).size;
    
    document.getElementById('live-count').textContent = total;
    document.getElementById('total-visitors').textContent = total;
    document.getElementById('unique-countries').textContent = uniqueCountries;
    document.getElementById('online-now').textContent = onlineUsers;
  }
  
  // Toggle widget
  const toggleBtn = document.getElementById('toggle-simple-map');
  const widget = document.getElementById('simple-visitor-map');
  
  toggleBtn.addEventListener('click', function() {
    const isMinimized = widget.classList.toggle('minimized');
    toggleBtn.textContent = isMinimized ? '+' : '‚àí';
  });
  
  // Simulate online users changing
  setInterval(() => {
    onlineUsers = Math.floor(Math.random() * 5) + 1;
    document.getElementById('online-now').textContent = onlineUsers;
  }, 10000);
  
  // Initialize
  loadExistingVisitors();
  updateStats();
  
  // Track current visitor after delay
  setTimeout(trackNewVisitor, 1500);
});
</script>
